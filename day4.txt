
helm install eks hashicorp/consul --version 1.0.0 --values consul-values.yaml --set global.datacenter=eks

eyJDQSI6WyItLS0tLUJFR0lOIENFUlRJRklDQVRFLS0tLS1cbk1JSUNEVENDQWJPZ0F3SUJBZ0lCQnpBS0JnZ3Foa2pPUFFRREFqQXdNUzR3TEFZRFZRUURFeVZ3Y21rdE4zaHpcbk1ITnVlaTVqYjI1emRXd3VZMkV1WVRabE5qRm1aREF1WTI5dWMzVnNNQjRYRFRJMU1EUXhNREV4TURJd01Gb1hcbkRUTTFNRFF3T0RFeE1ESXdNRm93TURFdU1Dd0dBMVVFQXhNbGNISnBMVGQ0Y3pCemJub3VZMjl1YzNWc0xtTmhcbkxtRTJaVFl4Wm1Rd0xtTnZibk4xYkRCWk1CTUdCeXFHU000OUFnRUdDQ3FHU000OUF3RUhBMElBQkRIb1VybHpcbjNtRjZxcFNhZnd5KzlxQU8zUnd4bndIdGNRSXRsRGoweTh0UnZhL1o3aVlXeWt0MTRTRFMrVlBQSVpsSVJJUWVcbllEOGtyTFlTVFd4V3U5K2pnYjB3Z2Jvd0RnWURWUjBQQVFIL0JBUURBZ0dHTUE4R0ExVWRFd0VCL3dRRk1BTUJcbkFmOHdLUVlEVlIwT0JDSUVJR1d0QWE1MHo4NE5HZmlKMWN5NndJd1IwcS81dWxlMGd1VjQ5R3NBL0poU01Dc0dcbkExVWRJd1FrTUNLQUlHV3RBYTUwejg0TkdmaUoxY3k2d0l3UjBxLzV1bGUwZ3VWNDlHc0EvSmhTTUQ4R0ExVWRcbkVRUTRNRGFHTkhOd2FXWm1aVG92TDJFMlpUWXhabVF3TFRBeVl6WXRNekEzWlMweU1UTTVMVFF4WmpWaVl6VTVcbk56TXlaUzVqYjI1emRXd3dDZ1lJS29aSXpqMEVBd0lEU0FBd1JRSWdUQWtaejNLNmFYZW1RZFQ0Tlc1UEt0YmJcbnVNalJWcmVNcFhheFRobWZCVDhDSVFEK21hZUNBZFNxaHNGdlF4dHZ2d0FXTmU0NXJYZjlVc1g0dlNKRXlvanNcbmdnPT1cbi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS1cbiJdLCJNYW51YWxTZXJ2ZXJBZGRyZXNzZXMiOm51bGwsIlNlcnZlckFkZHJlc3NlcyI6WyJhNDJhNjcyN2UzM2NlNDlmNjhhZTc1ZTMxN2JkOTQwOS05Mzk2NTc2NzEudXMtd2VzdC0yLmVsYi5hbWF6b25hd3MuY29tOjQ0MyJdLCJTZXJ2ZXJOYW1lIjoic2VydmVyLmVrcy5wZWVyaW5nLmE2ZTYxZmQwLTAyYzYtMzA3ZS0yMTM5LTQxZjViYzU5NzMyZS5jb25zdWwiLCJQZWVySUQiOiI2ZmIyYjU3NC1jOTM2LTBjOGItMTE5YS1lYzUzMmQ2NmZlNWQiLCJFc3RhYmxpc2htZW50U2VjcmV0IjoiOThiOTVjNjEtMmNkNi04ZDI3LWYzNWItMjlkZTViOGVjZDc4IiwiUmVtb3RlIjp7IlBhcnRpdGlvbiI6IiIsIkRhdGFjZW50ZXIiOiJla3MifX0=


helm repo add bitnami https://charts.bitnami.com/bitnami

helm install my-wordpress bitnami/wordpress



istioctl profile list
	 istioctl install --set profile=demo -y
kubectl get ns
kubectl get get po -n istio-system
kubectl label namespace default istio-injection=enabled

kubectl get ns --show-labels

kubectl apply -f addons

kubectl get pod,svc -n istio-system

kubectl run nginx-webapp --image=nginx

 kubectl get po

 curl -v $(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')/productpage



openssl req \
        -x509 \
        -newkey rsa:2048 \
        -keyout istio-elb.amazonaws.com.key.pem \
        -out istio-elb.amazonaws.com.cert.pem \
        -days 365 \
        -nodes \
        -subj '/CN=*.elb.amazonaws.com'


openssl x509 -in istio-elb.amazonaws.com.cert.pem -text -noout


kubectl create -n istio-system \
    secret tls gateway-cert-aws-elb-dns \
    --key=istio-elb.amazonaws.com.key.pem \
    --cert=istio-elb.amazonaws.com.cert.pem








openssl req \
        -x509 \
        -newkey rsa:2048 \
        -keyout istio-elb.sni.com.key.pem \
        -out istio-elb.sni.com.cert.pem \
        -days 365 \
        -nodes \
        -subj '/CN=*.sni.com'




kubectl create -n istio-system \
    secret tls gateway-cert-sni-dns \
    --key=istio-elb.sni.com.key.pem \
    --cert=istio-elb.sni.com.cert.pem



curl -k -v \
    https://$(echo $(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')/productpage)


kubectl run curl \
    --restart Never \
    --image curlimages/curl \
    --dry-run -o yaml \
    -- /bin/sh -c "sleep infinity" > pod_curl.yaml



apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: null
  labels:
    run: curl
  name: curl
spec:
  containers:
  - args:
    - /bin/sh
    - -c
    - sleep infinity
    image: curlimages/curl
    name: curl
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Never
status: {}
-----------




kubectl run curl --restart Never --image curlimages/curl -n non-istio --dry-run -o yaml -- /bin/sh -c "sleep infinity" > pod_curl_non_istio.yaml






----


apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: default
  namespace: istio-system # global
  # namespace: default # namespace-wide policy
spec:
  mtls:
    mode: STRICT






SECURE_INGRESS_PORT=443
export INGRESS_HOST=$(echo $(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'))
echo $INGRESS_HOST




TOKEN=$(curl https://raw.githubusercontent.com/istio/istio/release-1.6/security/tools/jwt/samples/demo.jwt -s)
echo $TOKEN





curl $INGRESS_HOST/headers -v
  514  curl $INGRESS_HOST/headers -V
  515  SECURE_INGRESS_PORT=443
  516  export INGRESS_HOST=$(echo $(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.status.loadBalancer.ingress[0].hostname}'))
  517  echo $INGRESS_HOST
  518  curl $INGRESS_HOST/headers -v
  519  curl --header "Authorization: Bearer dsdsdsdsd " $INGRESS_HOST/headers -v
  520  TOKEN=$(curl https://raw.githubusercontent.com/istio/istio/release-1.6/security/tools/jwt/samples/demo.jwt -s)
  521  echo $TOKEN
  522  curl --header "Authorization: Bearer $TOKEN" $INGRESS_HOST/headers -v
  523  history

